<?php

namespace PhpIrcd\Core;

/**
 * Configuration class for the IRC server
 */
class Config {
    private $config = [];
    private $defaultConfig = [
        'name' => 'irc.example.org',         // Server name
        'net' => 'ExampleNet',               // Network name
        'max_len' => 512,                    // Maximum packet length
        'max_users' => 100,                  // Maximum number of users
        'port' => 6667,                      // Default IRC port
        'version' => '1.0.0',                // Server version
        'bind_ip' => '0.0.0.0',              // IP address for binding
        'line_ending' => "\n",               // Line ending for socket communication
        'line_ending_conf' => "\n",          // Line ending for MOTD, etc.
        'ping_interval' => 90,               // Ping interval in seconds
        'ping_timeout' => 240,               // Ping timeout in seconds
        'ssl_enabled' => false,              // SSL support
        'ssl_cert' => '',                    // SSL certificate
        'ssl_key' => '',                     // SSL key
        'debug_mode' => false,               // Debug mode
        'log_level' => 1,                    // 0=Debug, 1=Info, 2=Warn, 3=Error
        'log_file' => 'ircd.log',            // Path to log file
        'motd' => "Welcome to the PHP-IRCd Server!\nThis server runs on PHP-IRCd v1.0.0",
    ];
    
    /**
     * Constructor
     * 
     * @param string|array $config Optional: Path to configuration file or configuration array
     */
    public function __construct($config = null) {
        // Set default configuration
        $this->config = $this->defaultConfig;
        
        // Load configuration if provided
        if (is_string($config) && file_exists($config)) {
            $this->loadFromFile($config);
        } elseif (is_array($config)) {
            $this->loadFromArray($config);
        }
    }
    
    /**
     * Loads configuration from a file
     * 
     * @param string $filePath Path to the configuration file
     * @return bool Success of loading
     */
    public function loadFromFile(string $filePath): bool {
        if (!file_exists($filePath)) {
            return false;
        }
        
        // Include PHP file with $config array
        $config = [];
        include $filePath;
        
        if (!is_array($config)) {
            return false;
        }
        
        $this->loadFromArray($config);
        return true;
    }
    
    /**
     * Loads configuration from an array
     * 
     * @param array $config The configuration array
     */
    public function loadFromArray(array $config): void {
        $this->config = array_merge($this->config, $config);
    }
    
    /**
     * Sets a configuration value
     * 
     * @param string $key The key
     * @param mixed $value The value
     */
    public function set(string $key, $value): void {
        $this->config[$key] = $value;
    }
    
    /**
     * Returns a configuration value
     * 
     * @param string $key The key
     * @param mixed $default Optional: Default value if key does not exist
     * @return mixed The configuration value or default value
     */
    public function get(string $key, $default = null) {
        return $this->config[$key] ?? $default;
    }
    
    /**
     * Checks if a configuration key exists
     * 
     * @param string $key The key
     * @return bool Whether the key exists
     */
    public function has(string $key): bool {
        return isset($this->config[$key]);
    }
    
    /**
     * Returns all configuration values
     * 
     * @return array All configuration values
     */
    public function getAll(): array {
        return $this->config;
    }
    
    /**
     * Saves the configuration to a file
     * 
     * @param string $filePath The path to the configuration file
     * @return bool Success of saving
     */
    public function saveToFile(string $filePath): bool {
        $configContent = "<?php\n\n";
        $configContent .= "//\n";
        $configContent .= "// PHP-IRCd configuration file\n";
        $configContent .= "// Automatically generated by the Config class\n";
        $configContent .= "//\n\n";
        $configContent .= "\$config = " . var_export($this->config, true) . ";\n";
        
        return file_put_contents($filePath, $configContent) !== false;
    }
    
    /**
     * Magic getter method for easy access to configuration values
     */
    public function __get(string $name) {
        return $this->get($name);
    }
    
    /**
     * Magic setter method for easy access to configuration values
     */
    public function __set(string $name, $value): void {
        $this->set($name, $value);
    }
    
    /**
     * Magic isset method for easy access to configuration values
     */
    public function __isset(string $name): bool {
        return $this->has($name);
    }
}